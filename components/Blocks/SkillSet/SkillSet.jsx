'use client';

import React, {useRef, useState} from 'react';

import styles from './SkillSet.module.scss';

import gsap from "gsap";
import {useGSAP} from "@gsap/react";
import {Draggable} from "gsap/Draggable";
import {InertiaPlugin} from "gsap/InertiaPlugin";
import {MotionPathPlugin} from "gsap/MotionPathPlugin";
import {ScrollTrigger} from "gsap/ScrollTrigger";

import Title from "@/components/UI/Elements/Title/Title";
import Skills from '@/database/Skills.json';
import Blobs from "@/components/UI/Elements/Blobs/Blobs";
import Image from "next/image";
import Ticker from "@/components/UI/Elements/Ticker/Ticker";

export default function SkillSet() {
    gsap.registerPlugin(Draggable, InertiaPlugin, MotionPathPlugin, ScrollTrigger);

    const container = useRef();
    const collisionDiv = useRef();
    const sphere = useRef();
    const [activeIndex, setActiveIndex] = useState(null);
    const [dragStatus, setDragStatus] = useState(null);

    // GSAP Animations
    useGSAP(() => {
        const boxes = gsap.utils.toArray(`.${styles.box}`);

        const handleResize = () => {
            // MotionPath
            gsap.set(boxes, {
                motionPath: {
                    path: "#circularCarouselPath",
                    align: "#circularCarouselPath",
                    alignOrigin: [0.5, 0.5],
                    start: -0.25,
                    end: (i) => i / boxes.length - 0.25,
                    autoRotate: true
                }
            });
        };

        // Draggable
        setActiveIndex(0);
        Draggable.create(`.${styles.circularCarousel}`, {
            type: "rotation",
            inertia: true,
            snap: (endVal) => gsap.utils.snap(360 / boxes.length, endVal),
            onPress: () => {
                setDragStatus('pressed');
            },
            onRelease: () => {
                setDragStatus(null);
            },
            onDragStart: () => {
                setActiveIndex(null);
            },
            onThrowComplete: () => {
                let collisionDivRect = collisionDiv.current?.getBoundingClientRect();
                let newActiveIndex = null;

                boxes.forEach((box, index) => {
                    let boxRect = box.getBoundingClientRect();
                    if (
                        collisionDivRect.x < boxRect.x + boxRect.width &&
                        collisionDivRect.x + collisionDivRect.width > boxRect.x &&
                        collisionDivRect.y < boxRect.y + boxRect.height &&
                        collisionDivRect.y + collisionDivRect.height > boxRect.y
                    ) {
                        newActiveIndex = index;
                    }
                });
                setActiveIndex(newActiveIndex);
            },
        });

        handleResize();
        window.addEventListener('resize', handleResize);
        return () => {
            window.removeEventListener('resize', handleResize);
        };

    }, { scope: container });


    return (
        <>
            <section className={`${styles.section}`} id={'skills'} ref={container}>
                <div className={styles.blobs}>
                    <Blobs type={'v2'} classVariable={`${styles.blob} ${styles.blobV2}`}/>
                    <Blobs type={'v1'} classVariable={`${styles.blob} ${styles.blobV1}`}/>
                </div>
                <div className={styles.grid}>
                    <Title color={'white'}><span>Mes</span> <br/> Comp√©tences</Title>
                    <div className={styles.circularCarouselWrapper}>
                        <div className={styles.collisionDiv} ref={collisionDiv}></div>
                        <div className={styles.circularCarousel}>
                            <svg viewBox="0 0 400 400">
                                <path strokeWidth="2" stroke="red" id="circularCarouselPath" fill="none"
                                      d="M396,200 C396,308.24781 308.24781,396 200,396 91.75219,396 4,308.24781 4,200 4,91.75219 91.75219,4 200,4 308.24781,4 396,91.75219 396,200 z"></path>
                            </svg>
                            {Skills.map((skill, index) => (
                                <div key={index}
                                     className={`${styles.box} ${activeIndex === index ? styles.isActive : ''}`}>
                                    <Image className={styles.image} src={skill.image} alt={skill.title} width={80}
                                           height={80}
                                           loading={'lazy'}/>
                                </div>
                            ))}
                        </div>
                        {Skills.map((skill, index) => (
                            <div key={index}
                                 className={`${styles.circularDescriptions} ${activeIndex === index ? styles.isActive : ''}`}>
                                <h2 className={styles.title}>{skill.title} <br/> {skill.subtitle}</h2>
                                <p className={styles.description}>{skill.description}</p>
                            </div>
                        ))}

                        <div className={styles.dragMe}>
                            <svg width="301" height="161" viewBox="0 0 301 161" fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M11.1461 88.6843C9.95479 78.9612 16.2324 69.7563 23.28 63.705C31.0828 56.9747 40.7381 52.7305 50.9072 51.0509C71.4774 47.5487 91.9654 54.1275 110.36 62.8502C121.814 68.2751 132.674 74.8133 142.998 82.2148C143.957 82.9045 143.869 84.666 143.161 85.4223C142.269 86.3989 140.912 86.2749 139.954 85.5853C131.201 79.3491 122.021 73.8035 112.412 68.9485C103.619 64.5511 94.5827 60.6241 85.1245 57.9173C66.7262 52.8247 46.1002 52.9468 29.9396 64.2953C22.3381 69.621 14.5308 78.5948 15.7878 88.5976C15.8958 89.8115 14.7243 90.8538 13.5877 90.9141C12.1237 90.9628 11.2541 89.8982 11.1461 88.6843Z"
                                    fill="white"/>
                                <path
                                    d="M138.333 47.636C140.311 59.3283 142.289 71.0206 144.268 82.7129C144.686 85.1228 145.658 88.2583 143.327 90.0155C142.185 90.9328 140.721 90.9815 139.239 90.8278C137.757 90.6742 136.352 90.4728 134.823 90.2419C128.925 89.5023 123.057 88.6377 117.159 87.8981C110.511 86.9806 103.91 86.1403 97.2622 85.2227C96.0599 85.0034 95.3269 83.6412 95.5939 82.5162C95.8905 81.2663 97.0981 80.6287 98.3004 80.848C109.115 82.2922 119.929 83.7363 130.618 85.1509C133.379 85.4762 136.111 85.9265 138.873 86.2518C139.2 86.2634 140.009 86.1914 140.354 86.4054C140.652 86.5421 140.384 86.2804 140.325 86.5304C140.242 87.435 140.093 86.6734 140.093 86.6734C140.045 86.5961 139.937 85.3821 139.89 85.3048C139.74 84.5432 139.639 83.8589 139.489 83.0973C138.569 77.7956 137.726 72.4463 136.758 67.0672C135.688 61.0039 134.696 54.893 133.626 48.8297C133.393 47.5861 133.94 46.3955 135.213 46.0375C136.582 45.8342 138.147 46.4698 138.333 47.636Z"
                                    fill="white"/>
<svg width="214" height="32" viewBox="0 0 214 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.03125 25V1.71875H15.4375V5.78125H4.9375V12.1719H14.4062V16.1562H4.9375V25H0.03125ZM23.6406 25.3281C21.974 25.3281 20.5885 24.8958 19.4844 24.0312C18.3906 23.1562 17.8438 21.8542 17.8438 20.125C17.8438 18.8229 18.1458 17.8021 18.75 17.0625C19.3646 16.3125 20.1719 15.7656 21.1719 15.4219C22.1719 15.0677 23.2448 14.8385 24.3906 14.7344C25.9115 14.5885 26.9948 14.4375 27.6406 14.2812C28.2969 14.1146 28.625 13.75 28.625 13.1875V13.1094C28.625 12.3906 28.3958 11.8333 27.9375 11.4375C27.4792 11.0417 26.8177 10.8438 25.9531 10.8438C25.0885 10.8438 24.3802 11.0312 23.8281 11.4062C23.2865 11.7812 22.9271 12.2604 22.75 12.8438L18.3438 12.1406C18.7604 10.6198 19.6354 9.4375 20.9688 8.59375C22.3125 7.73958 23.9792 7.3125 25.9688 7.3125C27.2604 7.3125 28.474 7.51562 29.6094 7.92188C30.7552 8.32812 31.6823 8.96875 32.3906 9.84375C33.099 10.7083 33.4531 11.8333 33.4531 13.2188V25H28.875V22.5625H28.7344C28.3073 23.3854 27.6719 24.0521 26.8281 24.5625C25.9948 25.0729 24.9323 25.3281 23.6406 25.3281ZM22.4531 19.9688C22.4531 20.6354 22.6927 21.1406 23.1719 21.4844C23.6615 21.8177 24.276 21.9844 25.0156 21.9844C26.0781 21.9844 26.9479 21.6771 27.625 21.0625C28.3125 20.4479 28.6562 19.6823 28.6562 18.7656V16.9062C28.4688 17.0312 28.1719 17.1458 27.7656 17.25C27.3698 17.3542 26.9479 17.4427 26.5 17.5156C26.0521 17.5781 25.651 17.6354 25.2969 17.6875C24.4427 17.8125 23.7552 18.0573 23.2344 18.4219C22.7135 18.776 22.4531 19.2917 22.4531 19.9688ZM37.3438 25V7.53125H42.1875V25H37.3438ZM39.7656 5.29688C39.0469 5.29688 38.4271 5.05729 37.9062 4.57812C37.3958 4.09896 37.1406 3.52083 37.1406 2.84375C37.1406 2.16667 37.3958 1.59375 37.9062 1.125C38.4271 0.645833 39.0469 0.40625 39.7656 0.40625C40.4844 0.40625 41.099 0.645833 41.6094 1.125C42.1302 1.59375 42.3906 2.16667 42.3906 2.84375C42.3906 3.52083 42.1302 4.09896 41.6094 4.57812C41.099 5.05729 40.4844 5.29688 39.7656 5.29688ZM55.3438 7.53125V11.1875H52.0312V19.625C52.0312 20.7604 52.5833 21.3281 53.6875 21.3281C53.875 21.3281 54.0781 21.3125 54.2969 21.2812C54.526 21.25 54.724 21.2135 54.8906 21.1719L55.6562 24.7969C54.625 25.099 53.625 25.25 52.6562 25.25C50.9271 25.25 49.5833 24.8125 48.625 23.9375C47.6771 23.0625 47.2031 21.8385 47.2031 20.2656V11.1875H44.8281V7.53125H47.2031V3.375H52.0312V7.53125H55.3438ZM66.4531 25.3438C64.6615 25.3438 63.1198 24.9792 61.8281 24.25C60.5365 23.5208 59.5417 22.4844 58.8438 21.1406C58.1458 19.7865 57.7969 18.1875 57.7969 16.3438C57.7969 14.5521 58.1406 12.9792 58.8281 11.625C59.526 10.2708 60.5052 9.21354 61.7656 8.45312C63.026 7.69271 64.5104 7.3125 66.2188 7.3125C67.7604 7.3125 69.151 7.64062 70.3906 8.29688C71.6406 8.95312 72.6302 9.9375 73.3594 11.25C74.099 12.5625 74.4688 14.2083 74.4688 16.1875V17.5H62.5625C62.6146 18.8229 63 19.8594 63.7188 20.6094C64.4375 21.3594 65.375 21.7344 66.5312 21.7344C67.3333 21.7344 68.0208 21.5625 68.5938 21.2188C69.1771 20.875 69.5938 20.375 69.8438 19.7188L74.3125 20.0156C73.9688 21.6198 73.1094 22.9115 71.7344 23.8906C70.3698 24.8594 68.6094 25.3438 66.4531 25.3438ZM62.5938 14.5156H69.8281C69.7135 13.4115 69.3594 12.5365 68.7656 11.8906C68.1719 11.2448 67.3385 10.9219 66.2656 10.9219C65.1823 10.9219 64.3229 11.2604 63.6875 11.9375C63.0625 12.6042 62.6979 13.4635 62.5938 14.5156ZM92.1562 12.5156L87.75 12.7812C87.625 12.2292 87.3125 11.7552 86.8125 11.3594C86.3229 10.9531 85.6562 10.75 84.8125 10.75C84.0625 10.75 83.4323 10.9062 82.9219 11.2188C82.4115 11.5312 82.1562 11.9479 82.1562 12.4688C82.1562 12.8854 82.3229 13.2396 82.6562 13.5312C82.9896 13.8229 83.5573 14.0573 84.3594 14.2344L87.5312 14.8594C90.8854 15.526 92.5625 17.099 92.5625 19.5781C92.5625 20.7344 92.2292 21.7448 91.5625 22.6094C90.8958 23.474 89.9792 24.1458 88.8125 24.625C87.6458 25.1042 86.3073 25.3438 84.7969 25.3438C82.4844 25.3438 80.6458 24.8646 79.2812 23.9062C77.9167 22.9375 77.1146 21.6198 76.875 19.9531L81.625 19.7031C81.9479 21.1406 83.0104 21.8594 84.8125 21.8594C85.6562 21.8594 86.3385 21.6927 86.8594 21.3594C87.3802 21.026 87.6406 20.6042 87.6406 20.0938C87.6406 19.2292 86.8958 18.6458 85.4062 18.3438L82.3906 17.7188C79.026 17.0417 77.3438 15.3854 77.3438 12.75C77.3438 11.0625 78.0156 9.73438 79.3594 8.76562C80.7135 7.79688 82.5052 7.3125 84.7344 7.3125C86.9427 7.3125 88.6823 7.78125 89.9531 8.71875C91.224 9.64583 91.9583 10.9115 92.1562 12.5156ZM106.484 13.5312V17.375H95.875V13.5312H106.484ZM118.453 31.9062C116.099 31.9062 114.25 31.4375 112.906 30.5C111.573 29.5729 110.766 28.4167 110.484 27.0312L114.953 26.4375C115.151 26.9688 115.531 27.4323 116.094 27.8281C116.667 28.224 117.49 28.4219 118.562 28.4219C119.615 28.4219 120.484 28.1667 121.172 27.6562C121.859 27.1562 122.203 26.3073 122.203 25.1094V21.9062H121.984C121.672 22.6354 121.109 23.2917 120.297 23.875C119.495 24.4583 118.396 24.75 117 24.75C115.698 24.75 114.51 24.4479 113.438 23.8438C112.365 23.2292 111.51 22.2917 110.875 21.0312C110.24 19.7708 109.922 18.1771 109.922 16.25C109.922 14.2604 110.245 12.6042 110.891 11.2812C111.547 9.95833 112.411 8.96875 113.484 8.3125C114.557 7.64583 115.734 7.3125 117.016 7.3125C117.984 7.3125 118.802 7.47917 119.469 7.8125C120.135 8.13542 120.672 8.54167 121.078 9.03125C121.495 9.52083 121.812 10.0052 122.031 10.4844H122.219V7.53125H126.969V25.1875C126.969 26.6667 126.604 27.9062 125.875 28.9062C125.146 29.9062 124.141 30.6562 122.859 31.1562C121.589 31.6562 120.12 31.9062 118.453 31.9062ZM114.875 16.2188C114.875 17.7188 115.188 18.9115 115.812 19.7969C116.448 20.6719 117.359 21.1094 118.547 21.1094C119.714 21.1094 120.615 20.6771 121.25 19.8125C121.896 18.9479 122.219 17.75 122.219 16.2188C122.219 14.6875 121.901 13.4635 121.266 12.5469C120.63 11.6198 119.724 11.1562 118.547 11.1562C117.349 11.1562 116.438 11.6302 115.812 12.5781C115.188 13.5156 114.875 14.7292 114.875 16.2188ZM135.688 1.71875V25H130.844V1.71875H135.688ZM139.562 25V7.53125H144.406V25H139.562ZM141.984 5.29688C141.266 5.29688 140.646 5.05729 140.125 4.57812C139.615 4.09896 139.359 3.52083 139.359 2.84375C139.359 2.16667 139.615 1.59375 140.125 1.125C140.646 0.645833 141.266 0.40625 141.984 0.40625C142.703 0.40625 143.318 0.645833 143.828 1.125C144.349 1.59375 144.609 2.16667 144.609 2.84375C144.609 3.52083 144.349 4.09896 143.828 4.57812C143.318 5.05729 142.703 5.29688 141.984 5.29688ZM162.781 12.5156L158.375 12.7812C158.25 12.2292 157.938 11.7552 157.438 11.3594C156.948 10.9531 156.281 10.75 155.438 10.75C154.688 10.75 154.057 10.9062 153.547 11.2188C153.036 11.5312 152.781 11.9479 152.781 12.4688C152.781 12.8854 152.948 13.2396 153.281 13.5312C153.615 13.8229 154.182 14.0573 154.984 14.2344L158.156 14.8594C161.51 15.526 163.188 17.099 163.188 19.5781C163.188 20.7344 162.854 21.7448 162.188 22.6094C161.521 23.474 160.604 24.1458 159.438 24.625C158.271 25.1042 156.932 25.3438 155.422 25.3438C153.109 25.3438 151.271 24.8646 149.906 23.9062C148.542 22.9375 147.74 21.6198 147.5 19.9531L152.25 19.7031C152.573 21.1406 153.635 21.8594 155.438 21.8594C156.281 21.8594 156.964 21.6927 157.484 21.3594C158.005 21.026 158.266 20.6042 158.266 20.0938C158.266 19.2292 157.521 18.6458 156.031 18.3438L153.016 17.7188C149.651 17.0417 147.969 15.3854 147.969 12.75C147.969 11.0625 148.641 9.73438 149.984 8.76562C151.339 7.79688 153.13 7.3125 155.359 7.3125C157.568 7.3125 159.307 7.78125 160.578 8.71875C161.849 9.64583 162.583 10.9115 162.781 12.5156ZM180.75 12.5156L176.344 12.7812C176.219 12.2292 175.906 11.7552 175.406 11.3594C174.917 10.9531 174.25 10.75 173.406 10.75C172.656 10.75 172.026 10.9062 171.516 11.2188C171.005 11.5312 170.75 11.9479 170.75 12.4688C170.75 12.8854 170.917 13.2396 171.25 13.5312C171.583 13.8229 172.151 14.0573 172.953 14.2344L176.125 14.8594C179.479 15.526 181.156 17.099 181.156 19.5781C181.156 20.7344 180.823 21.7448 180.156 22.6094C179.49 23.474 178.573 24.1458 177.406 24.625C176.24 25.1042 174.901 25.3438 173.391 25.3438C171.078 25.3438 169.24 24.8646 167.875 23.9062C166.51 22.9375 165.708 21.6198 165.469 19.9531L170.219 19.7031C170.542 21.1406 171.604 21.8594 173.406 21.8594C174.25 21.8594 174.932 21.6927 175.453 21.3594C175.974 21.026 176.234 20.6042 176.234 20.0938C176.234 19.2292 175.49 18.6458 174 18.3438L170.984 17.7188C167.62 17.0417 165.938 15.3854 165.938 12.75C165.938 11.0625 166.609 9.73438 167.953 8.76562C169.307 7.79688 171.099 7.3125 173.328 7.3125C175.536 7.3125 177.276 7.78125 178.547 8.71875C179.818 9.64583 180.552 10.9115 180.75 12.5156ZM192.172 25.3438C190.38 25.3438 188.839 24.9792 187.547 24.25C186.255 23.5208 185.26 22.4844 184.562 21.1406C183.865 19.7865 183.516 18.1875 183.516 16.3438C183.516 14.5521 183.859 12.9792 184.547 11.625C185.245 10.2708 186.224 9.21354 187.484 8.45312C188.745 7.69271 190.229 7.3125 191.938 7.3125C193.479 7.3125 194.87 7.64062 196.109 8.29688C197.359 8.95312 198.349 9.9375 199.078 11.25C199.818 12.5625 200.188 14.2083 200.188 16.1875V17.5H188.281C188.333 18.8229 188.719 19.8594 189.438 20.6094C190.156 21.3594 191.094 21.7344 192.25 21.7344C193.052 21.7344 193.74 21.5625 194.312 21.2188C194.896 20.875 195.312 20.375 195.562 19.7188L200.031 20.0156C199.688 21.6198 198.828 22.9115 197.453 23.8906C196.089 24.8594 194.328 25.3438 192.172 25.3438ZM188.312 14.5156H195.547C195.432 13.4115 195.078 12.5365 194.484 11.8906C193.891 11.2448 193.057 10.9219 191.984 10.9219C190.901 10.9219 190.042 11.2604 189.406 11.9375C188.781 12.6042 188.417 13.4635 188.312 14.5156ZM203.375 25V7.53125H208.062V10.5938H208.25C208.562 9.51042 209.094 8.69271 209.844 8.14062C210.594 7.57812 211.458 7.29688 212.438 7.29688C212.677 7.29688 212.938 7.3125 213.219 7.34375C213.5 7.375 213.745 7.41667 213.953 7.46875V11.75C213.724 11.6771 213.406 11.6198 213 11.5781C212.604 11.526 212.24 11.5 211.906 11.5C210.844 11.5 209.964 11.8385 209.266 12.5156C208.568 13.1823 208.219 14.0521 208.219 15.125V25H203.375Z" fill="white"/>
</svg> 
                            </svg>
                        </div>
                    </div>
                </div>

                <div ref={sphere} className={styles.sphereWrapper}>
                    <div className={`${styles.sphere} ${dragStatus === 'pressed' ? styles.isActive : ''}`}></div>
                </div>
            </section>
            <div style={{ padding: 'var(--y-spacing) 0 var(--x-spacing)', height: '6rem' }}></div>
        </>
    )
}